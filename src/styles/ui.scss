@import "_mixins";
@import "typography";

@mixin overlay() {
    // mobile first, override in custom inheriting classes
    // what the desktop / tablet views should look like
    position: fixed;
    z-index: 500;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    box-shadow: 0 3px 10px rgba(0, 0, 0, .75) !important;

    .header {
        width: 100%;
        display: inline-block;

        h2 {
            float: left;
            margin: 0;
        }

        .help-button {
            position: absolute;
            top: $spacing-medium;
            right: ($spacing-xlarge + $spacing-medium);
        }
    }

    .close-button {
        position: absolute;
        top: $spacing-medium;
        right: $spacing-large;
        @include closeButton();
    }
}

/**
 * Base behaviour for a modal window. A modal should be displayed inside the modal.vue component
 * which also applies overlay() and component() stylings.
 *
 * By invoking this mixin when providing your modal with a custom class, you can specify custom
 * dimensions. The modal will be fixed at those dimensions when there is sufficient screen space.
 * If not, it will accommodate responsive sizing for each edge below given threshold. On mobile, when
 * both $width and $height thresholds can't be met, the modal becomes fullscreen (as defined by overlay())
 */
@mixin modalBase( $width, $height ) {
    @include minWidth( $width ) {
        width: $width;

        h2 {
            padding-left: $spacing-large;
        }

        .content {
            padding: $spacing-medium $spacing-large;
        }
    }

    @include minWidthFallback( $width ) {
        .content {
            padding: $spacing-small $spacing-medium;
        }
    }

    $actionsHeight: 74px;
    $heightPlusActions: $height + $actionsHeight;

    @include minHeight( $heightPlusActions ) {
        height: $heightPlusActions;
    }

    @include minHeightFallback( $heightPlusActions ) {
        .actions {
            position: fixed;
        }
    }

    /* when on mobile, if one of the given dimensions doesn't match, force fullscreen overlay */

    @include mobile() {
        @include componentFallback( $width, $heightPlusActions ) {
            width: 100% !important;
            height: 100% !important;
        }
    }
}

@mixin closeButton() {
    cursor: pointer;
    background: none;
    color: $color-lines;
    border: 2px solid $color-lines;
    border-radius: 5px;
    padding: $spacing-xxsmall #{$spacing-xsmall + $spacing-xxsmall};

    &:hover {
        color: $color-4;
        border-color: $color-4;
    }
}

.button {
    $buttonColor: $color-2;
    cursor: pointer;
    padding: #{$spacing-xsmall + $spacing-small} $spacing-medium;
    border: none;// 2px solid #FFF;
    @include customFont();
    border-radius: $spacing-large;
    font-weight: bold;
    font-size: 100%;
    background-color: $buttonColor;
    color: $color-text;

    &:hover {
        background-color: $color-4;
        border-color: $color-4;
        color: #FFF;
    }

    &:disabled {
        cursor: default;
        background-color: $color-bg-dark !important;
        color: $color-bg !important;
        border-color: $color-bg !important;
    }

    &--block {
        display: block;
        text-align: center;
    }

    &--small {
        font-size: 75%;
        padding: $spacing-xsmall $spacing-small;
        border-radius: $spacing-medium;
        border: 2px solid $color-bg;
    }

    &--ghost {
        background: transparent;
        border: none;
    }

    &--primary {
        border: 2px solid $color-1;
        background: transparent;
    }

    &--secondary {
        border: 2px solid $color-4;
        background: transparent;
    }
}

@mixin actionsFooter() {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    text-align: center;
    display: flex;
    padding: $spacing-small $spacing-medium;
    box-sizing: border-box;

    button {
        flex: 1;
        margin: $spacing-small;
    }
}
